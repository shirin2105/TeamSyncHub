<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Provider Status - TeamSync Hub</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .navbar {
            background: linear-gradient(135deg, #1f2937 0%, #374151 100%) !important;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            height: 64px;
            border: none;
        }
        
        .navbar-brand {
            font-weight: 700;
            font-size: 1.5rem;
            color: white !important;
        }
        
        body {
            background-color: #f9fafb;
            padding-top: 80px;
        }
        
        .main-content {
            padding: 20px;
        }
        .status-card {
            transition: all 0.3s ease;
        }
        .status-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .provider-available {
            border-left: 4px solid #28a745;
        }
        .provider-unavailable {
            border-left: 4px solid #dc3545;
        }
        .provider-warning {
            border-left: 4px solid #ffc107;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-envelope me-2"></i>TeamSync Hub
            </a>
            <div class="navbar-nav ms-auto d-flex align-items-center">
                <button class="btn btn-outline-light me-3" onclick="checkEmails()">
                    <i class="fas fa-sync-alt me-1"></i>ƒê·ªìng b·ªô Email
                </button>
                <div class="dropdown">
                    <button class="btn btn-outline-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user-circle me-1"></i>User
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="/logout">
                            <i class="fas fa-sign-out-alt me-2"></i>ƒêƒÉng xu·∫•t
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container-fluid">
            <div class="row mb-4">
                <div class="col">
                    <h2 class="mb-0">üìä Email Provider Status</h2>
                    <p class="text-muted">Ki·ªÉm tra tr·∫°ng th√°i c√°c nh√† cung c·∫•p email</p>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary" onclick="refreshStatus()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>

            <!-- Loading -->
            <div id="loading" class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">ƒêang ki·ªÉm tra tr·∫°ng th√°i providers...</p>
            </div>

            <!-- Provider Status Cards -->
            <div id="status-container" class="row" style="display: none;">
                <!-- Microsoft Graph Card -->
                <div class="col-md-6 mb-4">
                    <div class="card status-card h-100" id="graph-card">
                        <div class="card-header d-flex align-items-center">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Microsoft_logo.svg/1024px-Microsoft_logo.svg.png" width="24" height="24" class="me-2">
                            <h5 class="mb-0">Microsoft Graph API</h5>
                        </div>
                        <div class="card-body">
                            <div id="graph-status" class="mb-3">
                                <span class="badge bg-secondary">Checking...</span>
                            </div>
                            <p class="card-text">
                                <strong>M√¥ t·∫£:</strong> API ch√≠nh th·ª©c c·ªßa Microsoft Office 365<br>
                                <strong>∆Øu ƒëi·ªÉm:</strong> T√≠ch h·ª£p native, kh√¥ng gi·ªõi h·∫°n<br>
                                <strong>Nh∆∞·ª£c ƒëi·ªÉm:</strong> B·ªã ch·∫∑n IP t·∫°i Vi·ªát Nam
                            </p>
                            <div id="graph-error" class="alert alert-danger" style="display: none;"></div>
                        </div>
                    </div>
                </div>

                <!-- SendGrid Card -->
                <div class="col-md-6 mb-4">
                    <div class="card status-card h-100" id="sendgrid-card">
                        <div class="card-header d-flex align-items-center">
                            <img src="https://sendgrid.com/wp-content/themes/sgdotcom/pages/resource/brand/2016/SendGrid-Logomark.png" width="24" height="24" class="me-2">
                            <h5 class="mb-0">SendGrid</h5>
                        </div>
                        <div class="card-body">
                            <div id="sendgrid-status" class="mb-3">
                                <span class="badge bg-secondary">Checking...</span>
                            </div>
                            <p class="card-text">
                                <strong>M√¥ t·∫£:</strong> Email delivery service c·ªßa Twilio<br>
                                <strong>∆Øu ƒëi·ªÉm:</strong> Kh√¥ng b·ªã ch·∫∑n IP, ƒë√°ng tin c·∫≠y<br>
                                <strong>Nh∆∞·ª£c ƒëi·ªÉm:</strong> Gi·ªõi h·∫°n 100 emails/day (free)
                            </p>
                            <div id="sendgrid-error" class="alert alert-danger" style="display: none;"></div>
                            <div id="sendgrid-setup" class="alert alert-info" style="display: none;">
                                <strong>C·∫ßn setup:</strong> 
                                <a href="#" onclick="setupSendGrid()" class="btn btn-sm btn-primary ms-2">Setup SendGrid</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary Card -->
            <div id="summary-card" class="card mt-4" style="display: none;">
                <div class="card-header">
                    <h5 class="mb-0">üìã T√≥m t·∫Øt</h5>
                </div>
                <div class="card-body">
                    <div id="summary-content"></div>
                </div>
            </div>

            <!-- Setup Guides -->
            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">üîß Quick Setup</h6>
                        </div>
                        <div class="card-body">
                            <button class="btn btn-outline-primary me-2 mb-2" onclick="setupSendGrid()">
                                Setup SendGrid
                            </button>
                            <button class="btn btn-outline-secondary me-2 mb-2" onclick="testMobileHotspot()">
                                Test Mobile Hotspot
                            </button>
                            <button class="btn btn-outline-info mb-2" onclick="checkIP()">
                                Check Current IP
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">üìñ Documentation</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li><a href="#" onclick="openGuide('sendgrid')">SendGrid Setup Guide</a></li>
                                <li><a href="#" onclick="openGuide('mobile')">Mobile Hotspot Guide</a></li>
                                <li><a href="#" onclick="openGuide('troubleshoot')">Troubleshooting</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let statusData = null;

        // Load status on page load
        document.addEventListener('DOMContentLoaded', function() {
            refreshStatus();
        });

        async function refreshStatus() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('status-container').style.display = 'none';
            document.getElementById('summary-card').style.display = 'none';

            try {
                const response = await fetch('/provider-status');
                const data = await response.json();
                
                if (data.success) {
                    statusData = data.providers;
                    updateStatusDisplay();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error fetching status:', error);
                alert('L·ªói khi ki·ªÉm tra status: ' + error.message);
            } finally {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('status-container').style.display = 'flex';
                document.getElementById('summary-card').style.display = 'block';
            }
        }

        function updateStatusDisplay() {
            // Update Microsoft Graph
            const graphCard = document.getElementById('graph-card');
            const graphStatus = document.getElementById('graph-status');
            const graphError = document.getElementById('graph-error');

            if (statusData.microsoftGraph.available) {
                graphCard.className = 'card status-card h-100 provider-available';
                graphStatus.innerHTML = '<span class="badge bg-success">‚úÖ Available</span>';
                graphError.style.display = 'none';
            } else {
                graphCard.className = 'card status-card h-100 provider-unavailable';
                graphStatus.innerHTML = '<span class="badge bg-danger">‚ùå Unavailable</span>';
                graphError.innerHTML = '<strong>Error:</strong> ' + statusData.microsoftGraph.error;
                graphError.style.display = 'block';
            }

            // Update SendGrid
            const sendgridCard = document.getElementById('sendgrid-card');
            const sendgridStatus = document.getElementById('sendgrid-status');
            const sendgridError = document.getElementById('sendgrid-error');
            const sendgridSetup = document.getElementById('sendgrid-setup');

            if (statusData.sendGrid.available) {
                sendgridCard.className = 'card status-card h-100 provider-available';
                sendgridStatus.innerHTML = '<span class="badge bg-success">‚úÖ Available</span>';
                sendgridError.style.display = 'none';
                sendgridSetup.style.display = 'none';
            } else {
                if (statusData.sendGrid.error.includes('Not configured')) {
                    sendgridCard.className = 'card status-card h-100 provider-warning';
                    sendgridStatus.innerHTML = '<span class="badge bg-warning">‚ö†Ô∏è Not Configured</span>';
                    sendgridSetup.style.display = 'block';
                    sendgridError.style.display = 'none';
                } else {
                    sendgridCard.className = 'card status-card h-100 provider-unavailable';
                    sendgridStatus.innerHTML = '<span class="badge bg-danger">‚ùå Error</span>';
                    sendgridError.innerHTML = '<strong>Error:</strong> ' + statusData.sendGrid.error;
                    sendgridError.style.display = 'block';
                    sendgridSetup.style.display = 'none';
                }
            }

            // Update summary
            updateSummary();
        }

        function updateSummary() {
            const summaryContent = document.getElementById('summary-content');
            let html = '';

            const availableCount = (statusData.microsoftGraph.available ? 1 : 0) + (statusData.sendGrid.available ? 1 : 0);

            if (availableCount === 2) {
                html = '<div class="alert alert-success"><strong>üéâ Tuy·ªát v·ªùi!</strong> C·∫£ hai providers ƒë·ªÅu ho·∫°t ƒë·ªông. Email s·∫Ω ƒë∆∞·ª£c g·ª≠i qua Microsoft Graph, fallback sang SendGrid n·∫øu c·∫ßn.</div>';
            } else if (availableCount === 1) {
                if (statusData.sendGrid.available) {
                    html = '<div class="alert alert-warning"><strong>‚ö†Ô∏è L∆∞u √Ω:</strong> Ch·ªâ SendGrid ho·∫°t ƒë·ªông. Microsoft Graph b·ªã ch·∫∑n IP. Emails s·∫Ω ƒë∆∞·ª£c g·ª≠i qua SendGrid.</div>';
                } else {
                    html = '<div class="alert alert-info"><strong>‚ÑπÔ∏è Th√¥ng tin:</strong> Ch·ªâ Microsoft Graph ho·∫°t ƒë·ªông. C√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ IP blocking.</div>';
                }
            } else {
                html = '<div class="alert alert-danger"><strong>‚ùå C·∫£nh b√°o:</strong> Kh√¥ng c√≥ provider n√†o ho·∫°t ƒë·ªông. Kh√¥ng th·ªÉ g·ª≠i email.</div>';
            }

            summaryContent.innerHTML = html;
        }

        function setupSendGrid() {
            if (confirm('M·ªü h∆∞·ªõng d·∫´n setup SendGrid?')) {
                window.open('sendgrid-setup-guide.md', '_blank');
            }
        }

        function testMobileHotspot() {
            if (confirm('Ch·∫°y test mobile hotspot? (C·∫ßn k·∫øt n·ªëi mobile hotspot tr∆∞·ªõc)')) {
                fetch('/test-mobile-hotspot')
                    .then(response => response.json())
                    .then(data => alert(data.message))
                    .catch(error => alert('Error: ' + error.message));
            }
        }

        function checkIP() {
            window.open('/check-ip', '_blank');
        }

        function openGuide(type) {
            const guides = {
                'sendgrid': 'sendgrid-setup-guide.md',
                'mobile': 'mobile-hotspot-guide.bat',
                'troubleshoot': '#'
            };
            
            if (guides[type] !== '#') {
                window.open(guides[type], '_blank');
            }
        }
        
        // Function for check emails button
        function checkEmails() {
            window.location.href = '/';
        }
    </script>
</body>
</html>
